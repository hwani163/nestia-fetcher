import { IConnection } from "./IConnection";
import { Primitive } from "./Primitive";
/**
 * Fetcher, utility class for the [**Nestia**](https://github.com/samchon/nestia) fetch.
 *
 * `Fetcher` is a utility class providing the {@link Fetcher.fetch} functions who're being
 * used by all of the SDK libraries, interacting with the remote HTTP servers, who are
 * generated by the [**Nestia**](https://github.com/samchon/nestia).
 *
 * As this `Fetcher` be used only by the [**Nestia**](https://github.com/samchon/nestia)
 * generated SDK libraries, you don't need to handle this class directly. It may only be
 * appeared in the source codes of the [**Nestia**](https://github.com/samchon/nestia)
 * generated SDK libraries.
 *
 * @author Jeongho Nam - https://github.com/samchon
 */
export declare class Fetcher {
    /**
     * Fetch function for the `GET` or `DELETE` methods.
     *
     * @param connection Connection information for the remote HTTP server
     * @param encrypted Whether the request/response body be encrypted or not
     * @param method Method of the HTTP request
     * @param path Path of the HTTP request
     * @return Response body data from the remote HTTP server
     */
    static fetch<Output>(connection: IConnection, encrypted: Fetcher.IEncrypted, method: "GET" | "DELETE", path: string): Promise<Primitive<Output>>;
    /**
     * Fetch function for the `POST`, `PUT` and `PATCH` methods.
     *
     * @param connection Connection information for the remote HTTP server
     * @param encrypted Whether the request/response body be encrypted or not
     * @param method Method of the HTTP request
     * @param path Path of the HTTP request
     * @param input Request body data for the HTTP request
     * @param stringify JSON string conversion function, default is the `JSON.stringify`
     * @return Response body data from the remote HTTP server
     */
    static fetch<Input, Output>(connection: IConnection, encrypted: Fetcher.IEncrypted, method: "POST" | "PUT" | "PATCH", path: string, input: Input, stringify?: (input: Input) => string): Promise<Primitive<Output>>;
}
export declare namespace Fetcher {
    /**
     * Whether be encrypted or not.
     *
     * `Fetcher.IEncrypted` is a type of interface who represents whether the HTTP request
     * and response body must be encrypted or not.
     *
     * Like the {@link Fetcher} who are being used by all of the SDK libraries that are
     * generated by the [Nestia](https://github.com/samchon/nestia), this `IEncrypted`
     * interface would be used by the [Nestia](https://github.com/samchon/nestia) generated
     * SDK libaries.
     *
     * As this `Fetcher` be used only by the [**Nestia**](https://github.com/samchon/nestia)
     * generated SDK libraries, you don't need to handle this class directly. It may only be
     * appeared in the source codes of the [**Nestia**](https://github.com/samchon/nestia)
     * generated SDK libraries.
     */
    interface IEncrypted {
        /**
         * Whether the request body be encrypted or not.
         */
        request?: boolean;
        /**
         * Whether the response body be encrypted or not.
         */
        response: boolean;
    }
}
