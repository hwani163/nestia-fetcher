"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Fetcher = void 0;
var import2_1 = __importDefault(require("import2"));
var AesPkcs5_1 = require("./AesPkcs5");
var HttpError_1 = require("./HttpError");
var Singleton_1 = require("./internal/Singleton");
/**
 * Fetcher, utility class for the [**Nestia**](https://github.com/samchon/nestia) fetch.
 *
 * `Fetcher` is a utility class providing the {@link Fetcher.fetch} functions who're being
 * used by all of the SDK libraries, interacting with the remote HTTP servers, who are
 * generated by the [**Nestia**](https://github.com/samchon/nestia).
 *
 * As this `Fetcher` be used only by the [**Nestia**](https://github.com/samchon/nestia)
 * generated SDK libraries, you don't need to handle this class directly. It may only be
 * appeared in the source codes of the [**Nestia**](https://github.com/samchon/nestia)
 * generated SDK libraries.
 *
 * @author Jeongho Nam - https://github.com/samchon
 */
var Fetcher = /** @class */ (function () {
    function Fetcher() {
    }
    Fetcher.fetch = function (connection, encrypted, method, path, input, stringify) {
        return __awaiter(this, void 0, void 0, function () {
            var init, body_1, headers, password, url, response, body, headers, password, ret;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (encrypted.request === true || encrypted.response === true)
                            if (connection.encryption === undefined)
                                throw new Error("Error on nestia.Fetcher.encrypt(): the encryption password has not been configured.");
                        init = {
                            method: method,
                            headers: encrypted.request === false &&
                                input !== undefined &&
                                typeof input === "object"
                                ? __assign(__assign({}, connection.headers), { "Content-Type": "application/json" }) : connection.headers,
                        };
                        // REQUEST BODY (WITH ENCRYPTION)
                        if (input !== undefined) {
                            body_1 = (stringify || JSON.stringify)(input);
                            if (encrypted.request === true) {
                                headers = new Singleton_1.Singleton(function () { return init.headers; });
                                password = connection.encryption instanceof Function
                                    ? connection.encryption({ headers: headers.get(), body: body_1 }, true)
                                    : connection.encryption;
                                if (is_disabled(password, headers, body_1, true) === false)
                                    body_1 = AesPkcs5_1.AesPkcs5.encrypt(body_1, password.key, password.iv);
                            }
                            init.body = body_1;
                        }
                        //----
                        // RESPONSE MESSAGE
                        //----
                        // URL SPECIFICATION
                        if (connection.host[connection.host.length - 1] !== "/" &&
                            path[0] !== "/")
                            path = "/" + path;
                        url = new URL("".concat(connection.host).concat(path));
                        return [4 /*yield*/, polyfill.get()];
                    case 1: return [4 /*yield*/, (_a.sent())(url.href, init)];
                    case 2:
                        response = _a.sent();
                        return [4 /*yield*/, response.text()];
                    case 3:
                        body = _a.sent();
                        if (!body)
                            return [2 /*return*/, undefined];
                        // CHECK THE STATUS CODE
                        if (response.status !== 200 && response.status !== 201)
                            throw new HttpError_1.HttpError(method, path, response.status, body);
                        // FINALIZATION (WITH DECODING)
                        if (encrypted.response === true) {
                            headers = new Singleton_1.Singleton(function () { return headers_to_object(response.headers); });
                            password = connection.encryption instanceof Function
                                ? connection.encryption({ headers: headers.get(), body: body }, false)
                                : connection.encryption;
                            if (is_disabled(password, headers, body, false) === false)
                                body = AesPkcs5_1.AesPkcs5.decrypt(body, password.key, password.iv);
                        }
                        ret = body;
                        try {
                            // PARSE RESPONSE BODY
                            ret = JSON.parse(ret);
                            // FIND __SET_HEADERS__ FIELD
                            if (ret.__set_headers__ !== undefined &&
                                typeof ret.__set_headers__ === "object") {
                                if (connection.headers === undefined)
                                    connection.headers = {};
                                Object.assign(connection.headers, ret.__set_headers__);
                            }
                        }
                        catch (_b) { }
                        // RETURNS
                        return [2 /*return*/, ret];
                }
            });
        });
    };
    return Fetcher;
}());
exports.Fetcher = Fetcher;
var polyfill = new Singleton_1.Singleton(function () { return __awaiter(void 0, void 0, void 0, function () {
    var _a;
    return __generator(this, function (_b) {
        switch (_b.label) {
            case 0:
                if (!(typeof global === "object" &&
                    typeof global.process === "object" &&
                    typeof global.process.versions === "object" &&
                    typeof global.process.versions.node !== undefined)) return [3 /*break*/, 3];
                if (!(global.fetch === undefined)) return [3 /*break*/, 2];
                _a = global;
                return [4 /*yield*/, (0, import2_1.default)("node-fetch")];
            case 1:
                _a.fetch = (_b.sent()).default;
                _b.label = 2;
            case 2: return [2 /*return*/, global.fetch];
            case 3: return [2 /*return*/, window.fetch];
        }
    });
}); });
function is_disabled(password, headers, body, encoded) {
    if (password.disabled === undefined)
        return false;
    if (typeof password.disabled === "function")
        return password.disabled({
            headers: headers.get(),
            body: body,
        }, encoded);
    return password.disabled;
}
function headers_to_object(headers) {
    var output = {};
    headers.forEach(function (value, key) { return (output[key] = value); });
    return output;
}
//# sourceMappingURL=Fetcher.js.map