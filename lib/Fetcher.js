"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Fetcher = void 0;
var HttpError_1 = require("./HttpError");
var Axios_1 = require("./Axios");
var axios = Axios_1.Axios.getInstance().instance;
/**
 * Fetcher, utility class for the [**Nestia**](https://github.com/samchon/nestia) fetch.
 *
 * `Fetcher` is a utility class providing the {@link Fetcher.fetch} functions who're being
 * used by all of the SDK libraries, interacting with the remote HTTP servers, who are
 * generated by the [**Nestia**](https://github.com/samchon/nestia).
 *
 * As this `Fetcher` be used only by the [**Nestia**](https://github.com/samchon/nestia)
 * generated SDK libraries, you don't need to handle this class directly. It may only be
 * appeared in the source codes of the [**Nestia**](https://github.com/samchon/nestia)
 * generated SDK libraries.
 *
 * @author Jeongho Nam - https://github.com/samchon
 */
var Fetcher = /** @class */ (function () {
    function Fetcher() {
    }
    Fetcher.fetch = function (connection, method, path, input) {
        return __awaiter(this, void 0, void 0, function () {
            var init, response, data, ret;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        //----
                        // REQUEST MESSSAGE
                        //----
                        // METHOD & HEADERS
                        if (path[0] !== "/") {
                            path = "/" + path;
                        }
                        init = {
                            baseURL: connection.host,
                            url: path,
                            method: method,
                            headers: input !== undefined && typeof input === "object"
                                ? __assign(__assign({}, connection.headers), { "Content-Type": "application/json" }) : connection.headers,
                        };
                        // REQUEST BODY (WITH ENCRYPTION)
                        if (input !== undefined) {
                            init.data = input;
                        }
                        return [4 /*yield*/, axios(init)];
                    case 1:
                        response = _a.sent();
                        data = response.data;
                        if (!data)
                            return [2 /*return*/, undefined];
                        // CHECK THE STATUS CODE
                        if (response.status !== 200 && response.status !== 201) {
                            throw new HttpError_1.HttpError(method, path, response.status, data);
                        }
                        ret = data;
                        try {
                            // FIND __SET_HEADERS__ FIELD
                            if (ret.__set_headers__ !== undefined &&
                                typeof ret.__set_headers__ === "object") {
                                if (connection.headers === undefined)
                                    connection.headers = {};
                                Object.assign(connection.headers, ret.__set_headers__);
                            }
                        }
                        catch (_b) { }
                        // RETURNS
                        return [2 /*return*/, data];
                }
            });
        });
    };
    return Fetcher;
}());
exports.Fetcher = Fetcher;
//# sourceMappingURL=Fetcher.js.map